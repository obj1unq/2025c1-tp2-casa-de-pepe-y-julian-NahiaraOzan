import casa.*
import cosas.*

describe "casa parte 1" {
    test "la lista de las cosas compradas es heladera, cama y plancha" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.equals([heladera, cama, plancha], casaDePepeYJulian.cosas())
    }
    test "cantidad de cosas compradas es 3" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.equals(3, casaDePepeYJulian.cantidadDeCosasCompradas())
    }
    test "tiene algún electrodoméstico" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.that(casaDePepeYJulian.tieneAlgun(electrodomestico))
    }
    test "tiene algún mueble" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.that(casaDePepeYJulian.tieneAlgun(mueble))
    }
    test "no tiene alguna comida" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.notThat(casaDePepeYJulian.tieneAlgun(comida))
    }
    test "Si le preguntan si viene de comprar un electrodoméstico dice que sí, pero si le preguntan si viene de comprar un mueble dice que no" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.that(casaDePepeYJulian.vieneDeComprar(electrodomestico))
        assert.notThat(casaDePepeYJulian.vieneDeComprar(mueble))
    }
    test "Es derrochona (ya que gastó 29200)" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.that(casaDePepeYJulian.esDerrochona())
    }
    test "los electrodomésticos compramos son la heladera y la plancha" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.equals( [heladera, plancha], casaDePepeYJulian.comprados(electrodomestico))
    }
    test "los muebles comprados son: la cama y nada más" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.equals( [cama], casaDePepeYJulian.comprados(mueble))
    }
    test "no hay comida comprada" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.that(casaDePepeYJulian.comprados(comida).isEmpty())
    }
    test "no es una mala época" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.notThat(casaDePepeYJulian.malaEpoca())
    }
    test "si le preguntamos que falta comprar de una tira de asado, una plancha y un paquete de fideos debe contestar que falta la tira de asado y el paquete de fideos." {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.equals( #{tiraDeAsado, paqueteDeFideos}, casaDePepeYJulian.queFaltaComprar(#{tiraDeAsado, plancha, paqueteDeFideos}))
    }
    test "falta comida" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.that(casaDePepeYJulian.faltaComida())
    }
    test "las categorías compradas son electrodoméstico y mueble" {
        cuentaCorriente.depositar(heladera.precio())
        cuentaCorriente.depositar(cama.precio())
        cuentaCorriente.depositar(plancha.precio())
        casaDePepeYJulian.comprar(heladera)
        casaDePepeYJulian.comprar(cama)
        casaDePepeYJulian.comprar(plancha)
        assert.equals(#{electrodomestico, mueble}, casaDePepeYJulian.categoriasCompradas())
    }
}

describe "casa Parte 2" {
    
    test "si la cuenta tiene 20 de saldo, si se deposita 1000 pesos, el saldo queda en 1020 pesos, si luego se extre 50 queda en 970 pesos. 
            Si se intenta extraer 2000 debería lanzar error ya que no se puede cumplir la responsabilidad." {
        // como me habías  dicho que no era necesario el getter de cuenta actual asigné por defecto la cuenta corriente,
        // ya que es el objeto que estoy validando, hice lo mismo con la otra cuenta
        cuentaCorriente.depositar(1000)
        assert.equals(1020, cuentaCorriente.saldo())
        cuentaCorriente.extraer(50)
        assert.equals(970, cuentaCorriente.saldo())
        assert.throwsException( { cuentaCorriente.extraer(2000) })
        assert.equals(970, cuentaCorriente.saldo())
    }

    test "para una cuenta con un saldo de 500 pesos y 20 pesos de costo por operación, si se deposita 1000 pesos, 
          el saldo queda en 1480 pesos. Si luego se extrae 30, queda en 1450. Después se eso se intenta depositar 2000, pero no se puede porque 
          violaría la regla de negocio, por lo que hay que verificar que se lance el error y que el saldo siga siendo de 1450. 
          Finalmente se extren 2000 pesos dejando el saldo en -550." {
        
        cuentaConGastos.depositar(1000)
        assert.equals(1480, cuentaConGastos.saldo())
        cuentaConGastos.extraer(30)
        assert.equals(1450, cuentaConGastos.saldo())
        assert.throwsException({cuentaConGastos.depositar(2000)})
        assert.equals(1450, cuentaConGastos.saldo())
        cuentaConGastos.extraer(2000)
        assert.equals(-550, cuentaConGastos.saldo())
    }
}


